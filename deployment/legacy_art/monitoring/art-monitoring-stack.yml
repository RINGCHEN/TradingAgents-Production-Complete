# ART系統完整監控堆疊 Docker Compose配置
# DevOps Engineer 墨子 - 統一監控和運維自動化

version: '3.8'

services:
  # Prometheus 主監控服務
  prometheus-unified:
    image: prom/prometheus:latest
    container_name: art-prometheus-unified
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-unified.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert-rules:/etc/prometheus/rules
      - prometheus_unified_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-admin-api'
    networks:
      - art-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana 可視化服務
  grafana-unified:
    image: grafana/grafana:latest
    container_name: art-grafana-unified
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=art_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS:-alerts@tradingagents.com}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_unified_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/plugins:/var/lib/grafana/plugins
    depends_on:
      - prometheus-unified
    networks:
      - art-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager 告警管理
  alertmanager:
    image: prom/alertmanager:latest
    container_name: art-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    networks:
      - art-monitoring
    restart: unless-stopped

  # Node Exporter (系統監控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: art-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - art-monitoring
    restart: unless-stopped

  # cAdvisor (容器監控)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: art-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - art-monitoring
    restart: unless-stopped

  # GPU Exporter (NVIDIA GPU監控)
  nvidia-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: art-nvidia-exporter-monitoring
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9445:9445"
    networks:
      - art-monitoring
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: art-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-training:6379
    networks:
      - art-monitoring
    restart: unless-stopped

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: art-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://mlflow:mlflow_password@postgres-mlflow:5432/mlflow?sslmode=disable
    networks:
      - art-monitoring
    restart: unless-stopped

  # Blackbox Exporter (端點健康檢查)
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: art-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - art-monitoring
    restart: unless-stopped

  # Jaeger (分佈式追蹤)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: art-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - art-monitoring
    restart: unless-stopped

  # Loki (日誌聚合)
  loki:
    image: grafana/loki:latest
    container_name: art-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - art-monitoring
    restart: unless-stopped

  # Promtail (日誌收集)
  promtail:
    image: grafana/promtail:latest
    container_name: art-promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - art-monitoring
    restart: unless-stopped

  # Custom Metrics API
  custom-metrics-api:
    build:
      context: .
      dockerfile: Dockerfile.metrics-api
    container_name: art-custom-metrics
    ports:
      - "8090:8090"
    environment:
      - REDIS_URL=redis://redis-training:6379
      - POSTGRES_URL=postgresql://mlflow:mlflow_password@postgres-mlflow:5432/mlflow
      - PROMETHEUS_URL=http://prometheus-unified:9090
    networks:
      - art-monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 自動化運維腳本服務
  automation-service:
    build:
      context: .
      dockerfile: Dockerfile.automation
    container_name: art-automation-service
    environment:
      - PROMETHEUS_URL=http://prometheus-unified:9090
      - ALERTMANAGER_URL=http://alertmanager:9093
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - ENABLE_AUTO_SCALING=true
      - ENABLE_AUTO_HEALING=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./automation/scripts:/app/scripts
    networks:
      - art-monitoring
    restart: unless-stopped

volumes:
  prometheus_unified_data:
    driver: local
  grafana_unified_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

networks:
  art-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# 外部網路連接（連接到訓練環境）
  art-training-network:
    external: true